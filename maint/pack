#!/usr/bin/env perl
use strict;
use warnings;
use File::Temp ();
use File::Find;
use File::Path;
use File::Basename;
use Module::CoreList;
use autodie qw(:all);

my ($in_file) = @ARGV;
$in_file && -f $in_file or die "Input file must be specified!";

$ENV{PERL_STRICTURES_EXTRA} = 0;
my ($exclude) = map { qr{$_} } join '|', qw(
    ^Sub::Name$
    ^Class::XSAccessor
);

my @modules;
find({no_chdir => 1, wanted => sub {
    -f or return;
    s/\.pm$// or return;
    s{^lib/}{};
    s{/}{::}g;
    push @modules, $_;
}}, 'lib');

{
    local $ENV{PERL5LIB} = "lib:" . ($ENV{PERL5LIB}||'');
    system 'fatpack', 'trace', (map { "--use=$_" } @modules), $in_file;
}
my @trace = do {
    open my $fh, '<', 'fatpacker.trace';
    <$fh>;
};
chomp @trace;
@trace = grep {
    my $mod = $_;
    $mod =~ s/\.pm$//;
    $mod =~ s{/}{::}g;
    ! ( $Module::CoreList::version{5.008008}{$mod} || $mod =~ $exclude || grep { $mod eq $_ } @modules )
} @trace;

my @packlists = `fatpack packlists-for @trace`;
chomp @packlists;

rmtree('fatlib');
system 'fatpack', 'tree', @packlists;


my $content = "#!/usr/bin/env perl\n";
$content .= `fatpack file`;
my $pack_hack = <<'END_HACK';
sub _fatpacker::modules {
    my @mods = sort keys %fatpacked;
    for (@mods) {
        s/\.pm$//;
        s{/}{::}g;
    }
    return @mods;
}
END_HACK
$content =~ s{(my \%fatpacked;)}{$1\n$pack_hack};
my $script = do {
    open my $fh, '<', $in_file;
    local $/;
    <$fh>
};
$script =~ s/^#!.*\n//;
$content .= $script;

rmtree('fatlib');
unlink 'fatpacker.trace';

print $content;

